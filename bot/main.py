import asyncio
from aiogram import Bot, Dispatcher, types
from db import init_db, add_user, get_user, update_points, get_top_users
from apscheduler.schedulers.asyncio import AsyncIOScheduler

TOKEN = ""
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

WELCOME_MSG = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."

@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    await add_user(msg.from_user.id, msg.from_user.username or "")
    kb = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")
    )
    await msg.answer(WELCOME_MSG, reply_markup=kb)

@dp.callback_query_handler(text="register")
async def register(cb: types.CallbackQuery):
    await add_user(cb.from_user.id, cb.from_user.username or "")
    await cb.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

@dp.message_handler(commands=["profile"])
async def profile(msg: types.Message):
    user = await get_user(msg.from_user.id)
    if user:
        text = f"–í–∞—à–∏ –æ—á–∫–∏: {user[2]}\n–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {user[3]}"
        await msg.answer(text)
    else:
        await msg.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")

@dp.message_handler(commands=["stats"])
async def stats(msg: types.Message):
    users = await get_top_users()
    text = "üèÜ –¢–æ–ø 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
    for i, user in enumerate(users, 1):
        text += f"{i}. {user[1]} ‚Äî {user[2]} –æ—á–∫–æ–≤\n"
    await msg.answer(text)

async def send_reminders():
    users = await get_top_users(100)
    for user in users:
        # –ø—Ä–∏–º–µ—Ä: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª N –¥–Ω–µ–π, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ last_activity
        await bot.send_message(user[0], "–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!")

async def send_achievements():
    users = await get_top_users(100)
    for user in users:
        # –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –Ω–∞–±—Ä–∞–ª 100 –æ—á–∫–æ–≤ –∏ achievement –Ω–µ –≤—ã–¥–∞–Ω
        if user[2] >= 100 and '100pts' not in user[3].split(','):
            await update_points(user[0], 0)  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–µ –º–µ–Ω—è–µ–º –æ—á–∫–∏
            # –î–æ–±–∞–≤–∏—Ç—å –∞—á–∏–≤–∫—É
            # (–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞–ø–¥–µ–π—Ç achieve)
            await bot.send_message(user[0], "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 100 –æ—á–∫–æ–≤!")
            # –ó–¥–µ—Å—å –Ω–∞–¥–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î

async def on_startup(_):
    await init_db()
    scheduler.start()
    scheduler.add_job(send_reminders, "interval", hours=24)
    scheduler.add_job(send_achievements, "interval", hours=1)

if __name__ == "__main__":
    dp.start_polling(dp)
