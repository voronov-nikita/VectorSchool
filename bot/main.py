import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from config import BOT_TOKEN, ADMIN_IDS, DATABASE_NAME
from database import Database
# from keyboards import get_main_keyboard, get_admin_keyboard, get_achievements_keyboard

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db = Database(DATABASE_NAME)

class AdminStates(StatesGroup):
    waiting_for_image = State()
    waiting_for_points = State()

def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è üèÜ")
    builder.button(text="–ú–æ–∏ –±–∞–ª–ª—ã üí∞")
    builder.button(text="–ü–æ–º–æ—â—å ‚ùì")
    return builder.as_markup(resize_keyboard=True)

def get_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è üèÜ")
    builder.button(text="–ú–æ–∏ –±–∞–ª–ª—ã üí∞")
    builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üñºÔ∏è")
    builder.button(text="–ü–æ–º–æ—â—å ‚ùì")
    return builder.as_markup(resize_keyboard=True)

def get_achievements_keyboard(achievements):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏"""
    builder = InlineKeyboardBuilder()
    for ach in achievements:
        builder.button(
            text=f"{ach['title']} - {ach['date']}",
            callback_data=f"ach_{ach['title']}"
        )
    builder.adjust(1)
    return builder.as_markup()

@dp.message(Command('start'))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    db.add_user(user.id, user.username, user.first_name, user.last_name)
    
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –±–∞–ª–ª–æ–≤. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "üèÜ - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "üí∞ - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–≤–æ–∏ –±–∞–ª–ª—ã\n"
        "‚ùì - –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    if user.id in ADMIN_IDS:
        await message.answer(welcome_text, reply_markup=get_admin_keyboard())
    else:
        await message.answer(welcome_text, reply_markup=get_main_keyboard())

@dp.message(Command('help'))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/achievement - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "/info - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )
    await message.answer(help_text)

@dp.message(Command('achievement'))
async def cmd_achievement(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /achievement"""
    achievements = db.get_user_achievements(message.from_user.id)
    
    if not achievements:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π üò¢")
        return
    
    keyboard = get_achievements_keyboard(achievements)
    await message.answer("–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.message(Command('info'))
async def cmd_info(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /info"""
    points = db.get_user_points(message.from_user.id)
    await message.answer(f"üéØ –£ –≤–∞—Å {points} –±–∞–ª–ª–æ–≤!")

@dp.message(F.text == "–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è üèÜ")
async def btn_achievements(message: Message):
    """–ö–Ω–æ–ø–∫–∞ '–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è'"""
    await cmd_achievement(message)

@dp.message(F.text == "–ú–æ–∏ –±–∞–ª–ª—ã üí∞")
async def btn_points(message: Message):
    """–ö–Ω–æ–ø–∫–∞ '–ú–æ–∏ –±–∞–ª–ª—ã'"""
    await cmd_info(message)

@dp.message(F.text == "–ü–æ–º–æ—â—å ‚ùì")
async def btn_help(message: Message):
    """–ö–Ω–æ–ø–∫–∞ '–ü–æ–º–æ—â—å'"""
    await cmd_help(message)

@dp.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üñºÔ∏è", F.from_user.id.in_(ADMIN_IDS))
async def btn_send_image(message: Message, state):
    """–ö–Ω–æ–ø–∫–∞ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    await state.set_state(AdminStates.waiting_for_image)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")

@dp.message(AdminStates.waiting_for_image, F.photo)
async def process_image(message: Message, state):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞"""
    photo = message.photo[-1]
    file_id = photo.file_id
    
    # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    users = db.cursor.execute("SELECT user_id FROM users").fetchall()
    
    for user in users:
        try:
            await bot.send_photo(user[0], file_id, caption="–ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
    
    await state.clear()
    await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!", 
                         reply_markup=get_admin_keyboard())

@dp.callback_query(F.data.startswith('ach_'))
async def process_achievement_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"""
    achievement_title = callback.data[4:]
    achievements = db.get_user_achievements(callback.from_user.id)
    
    for ach in achievements:
        if ach['title'] == achievement_title:
            response = (
                f"üèÜ <b>{ach['title']}</b>\n\n"
                f"üìù <i>{ach['description']}</i>\n\n"
                f"üìÖ –î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {ach['date']}"
            )
            await callback.message.answer(
                response,
                parse_mode="HTML"
            )
            break
    
    await callback.answer()

async def main():
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs(os.path.dirname(DATABASE_NAME), exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())